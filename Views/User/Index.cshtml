@using Microsoft.AspNetCore.Html
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedResource> Localizer

@{
    ViewData["Title"] = $"{Localizer["MenuUser"]}";

    var breadcrumb = new List<(string, string, string)>
{
("Home", "Index", "Home"),
("User", "", "")
};
    var headerParams = new { PageTitle = $"{Localizer["MenuUser"]}", breadcrumb };

    var tableRender = new HtmlString(@"<thead>
<tr>
<th width='5%'><inputtype='checkbox'id='checkAll'></th>
<th width='15%'>Username</th>
<th width='25%'>Nama Lengkap</th>
<th width='15%'>Role</th>
<th width='15%'>Email</th>
<th width='10%'>Actions</th>
</tr>
</thead>
<tbody></tbody>
<tfoot>
<tr>
<th></th>
<th><input type='text'class='form-control'placeholder='Search Username'/></th>
<th><input type='text'class='form-control'placeholder='Search Nama Lengkap'/></th>
<th></th>
<th><input type='text'class='form-control'placeholder='Search Email'/></th>
<th></th>
</tr>
</tfoot>");

    var tableId = new ViewDataDictionary(ViewData) { { "TableId", "user" } };
    var contentModalDelete = new HtmlString(@"<p>Anda yakin ingin hapus data ?</p><p id='content'></p> ");
    var idModalDelete = new ViewDataDictionary(ViewData) { { "ModalId", "modal-delete" }, { "FormId", "formHapus" } };
    var contentModalMultiDelete = new HtmlString(@"<p>Anda yakin ingin hapus data yang terpilih ?</p><input type='hidden'
name='datahapus' id='datahapus' value=''> ");
    var idModalMultiDelete = new ViewDataDictionary(ViewData) { {"ModalId","modal-multidelete" }, { "FormId",
"formHapusMulti" } };
}

@await Component.InvokeAsync("PageHeader", headerParams)

<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <card-layout title="Data @Localizer["MenuUser"]" button-create-link="User/Create"
                    button-multiple-delete="true">
                    @await Html.PartialAsync("Components/_TableOuter", tableRender, tableId)
                </card-layout>
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("Components/_ModalDelete", contentModalDelete, idModalDelete)

@await Html.PartialAsync("Components/_ModalDelete", contentModalMultiDelete, idModalMultiDelete)

@section Styles
{
    @{
        await Html.RenderPartialAsync("_DatatableStylesPartial");
    }
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_DatatableScriptsPartial");
    }
    <script src="~/helpers/js/multi-delete.js"></script>
    <script type="text/template" id="tpl-button-dropdown">
                                                            @await Html.PartialAsync("Components/_ButtonDropdown", new HtmlString(@"<div class='dropdown-menu' style=''>__BTN__</div>"))
                                                        </script>
    <script type="text/template" id="tpl-button-edit">
                                                            @await Html.PartialAsync("Components/_ButtonEdit", new ViewDataDictionary(ViewData) { { "LinkPath", "__LINK__" } })
                                                        </script>
    <script type="text/template" id="tpl-button-delete">
                                                            @await Html.PartialAsync("Components/_ButtonDelete", new ViewDataDictionary(ViewData) { { "DataId", "__DATAID__" }, { "DataTitle", "__DATATITLE__" } })
                                                        </script>
    <script type="text/template" id="tpl-loading-icon">
                                                            @await Html.PartialAsync("Components/_LoadingIcon", new ViewDataDictionary(ViewData) { { "DataId", "__DATAID__" }, { "DataTitle", "__DATATITLE__" } })
                                                        </script>
    <script>
        $(async function () {
            let columns = [{
                data: 'id',
                orderable: false,
                searchable: false,
                render: function (data, type, row, meta) {
                    let check = `<input name='idpilih[]' type="checkbox" id="checkItem" value="${row.id}">`;
                    return check;
                }
            },
            {
                data: 'userName',
                render: function (data, type, row, meta) {
                    return `${row.userName}`;
                }
            },
            {
                data: 'fullName',
                render: function (data, type, row, meta) {
                    return `${row.fullName}`;
                }
            },
            {
                data: 'roles',
                orderable: false,
                searchable: false,
                render: function (data, type, row, meta) {
                    return row.roles.map(r => `<span class="badge bg-success">${r}</span>`).join(' ');
                }
            },
            {
                data: 'email',
                render: function (data, type, row, meta) {
                    return `${row.email}`;
                }
            },
            {
                data: 'id',
                orderable: false,
                searchable: false,
                render: function (data, type, row, meta) {
                    let id = row.id;
                    let title = row.fullname;

                    let tpl = $("#tpl-button-edit").html();
                    tpl = tpl.replace("__LINK__", `/user/edit/${id}`);

                    let tplDelete = $("#tpl-button-delete").html();
                    tplDelete = tplDelete.replace("__DATAID__", id);
                    tplDelete = tplDelete.replace("__DATATITLE__", title);

                    let tplDropdown = $("#tpl-button-dropdown").html()
                    tplDropdown = tplDropdown.replace("__BTN__", tpl + tplDelete)

                    let html = '';
                    html += tplDropdown;
                    return html;
                }
            }
            ];

            let options = {
                isEnabled: true,
                saveState: false,
                hoverClass: 'dt-colresizable-hover',
                hasBoundCheck: true,
                minBoundClass: 'dt-colresizable-bound-min',
                maxBoundClass: 'dt-colresizable-bound-max',
                isResizable: function (column) {
                    return true;
                },
                onResizeStart: function (column, columns) {
                },
                onResize: function (column) {
                },
                onResizeEnd: function (column, columns) {
                },
                getMinWidthOf: function ($thNode) {
                },
                stateSaveCallback: function (settings, data) {
                },
                stateLoadCallback: function (settings) {
                }
            };

            let dtURL = "@Url.Action("GetData", "User")";
            let deleteDataUrl = `/user/delete/:id`;

            const dt = await dataTableRender(dtURL, columns, options, "POST", deleteDataUrl, 1, 'user')
        });

        $("#btn-delete-multi").on("click", function () {
            let multiDeleteDataUrl = `/user/multi-delete`;
            hapusmulti(multiDeleteDataUrl);
        });

        $("#formHapusMulti").submit(function (e) {
            let tpl = $("#tpl-loading-icon").html();
            $(".delete").html(tpl);
            $(".delete").prop("disabled", true);
        });
    </script>
}