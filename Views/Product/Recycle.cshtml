@using Microsoft.AspNetCore.Html
@model IEnumerable<DotnetTestingWebApp.Models.Product>

@{
    ViewData["Title"] = "Produk Page";
}

@await Component.InvokeAsync(
    "PageHeader", 
    new { 
        PageTitle = "Produk Manajemen | Data Terhapus", 
        breadcrumb = new List<(string, string, string)>
        {
            ("Home", "Index", "Home"),
            ("Produk", "Index", "Product"),
            ("Produk", "", "")
        }
    }
)
<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <card-layout title="Daftar Produk Terhapus">
                    @await Html.PartialAsync("Components/_TableOuter", new HtmlString(@"
                        <thead>
                            <tr>
                                <th width='15%'>Nama</th>
                                <th width='5%'>Harga</th>
                                <th width='10%'>Updated At</th>
                                <th width='10%'>Deleted At</th>
                                <th width='10%'>Actions</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                        <tfoot>
                            <tr>
                                <th><input type='text' class='form-control' placeholder='Search Name' /></th>
                                <th><input type='text' class='form-control' placeholder='Search Price' /></th>
                                <th><input type='text' class='form-control' placeholder='Search Updated At' /></th>
                                <th><input type='text' class='form-control' placeholder='Search Deleted At' /></th>
                                <th></th>
                            </tr>
                        </tfoot>"), new ViewDataDictionary(ViewData) { { "TableId", "product" } })
                </card-layout>
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("Components/_ModalRestore", new HtmlString(@"<p>Anda yakin ingin restore data ?</p>
		<p id='content'></p>"), new ViewDataDictionary(ViewData) { { "ModalId", "modal-delete" }, { "FormId", "formHapus" } })

@section Styles {
@{await Html.RenderPartialAsync("_DatatableStylesPartial");}
}

@section Scripts {
@{await Html.RenderPartialAsync("_DatatableScriptsPartial");}
<script src="~/helpers/js/format-date.js"></script>
<script src="~/helpers/js/format-rupiah.js"></script>
<script src="~/helpers/js/multi-delete.js"></script>
<script type="text/template" id="tpl-button-dropdown">
    @await Html.PartialAsync("Components/_ButtonDropdown", new HtmlString(@"<div class='dropdown-menu' style=''>__BTN__</div>"))
</script>
<script type="text/template" id="tpl-button-restore">
    @await Html.PartialAsync("Components/_ButtonRestore", new ViewDataDictionary(ViewData) { { "DataId", "__DATAID__" }, {"DataTitle", "__DATATITLE__"} })
</script>
<script type="text/template" id="tpl-loading-icon">
    @await Html.PartialAsync("Components/_LoadingIcon", new ViewDataDictionary(ViewData) { { "DataId", "__DATAID__" }, {"DataTitle", "__DATATITLE__"} })
</script>
<script>
    $(async function () {
        let columns = [
        {
            data: 'name',
            render: function(data, type, row, meta) {
                return `${row.name}`;
            }
        },
        {
            data: 'price',
            render: function(data, type, row, meta) {
                return `${formatRupiah(row.price)}`;
            }
        },
        {
            data: 'updatedAt',
            render: function(data, type, row, meta) {
                return `${formatDateTimeYMDHIS(row.updatedAt)}`;
            }
        },
        {
            data: 'deletedAt',
            render: function(data, type, row, meta) {
                return `${formatDateTimeYMDHIS(row.deletedAt)}`;
            }
        },
        {
            data: 'id',
            orderable: false,
            searchable: false,
            render: function(data, type, row, meta) {
                let id = row.id;
                let title = row.name;
                
                let tplRestore = $("#tpl-button-restore").html();
                    tplRestore = tplRestore.replace("__DATAID__", id);
                    tplRestore = tplRestore.replace("__DATATITLE__", title);

                let tplDropdown = $("#tpl-button-dropdown").html()
                tplDropdown = tplDropdown.replace("__BTN__", tplRestore)
                
                let html = '';
                html += tplDropdown;
                return html;
            }
        }
    ];
        
        let options = {
            isEnabled: true,
            saveState: false,
            hoverClass: 'dt-colresizable-hover',
            hasBoundCheck: true,
            minBoundClass: 'dt-colresizable-bound-min',
            maxBoundClass: 'dt-colresizable-bound-max',
            isResizable: function (column) {
                return true;
            },
            onResizeStart: function (column, columns) {
            },
            onResize: function (column) {
            },
            onResizeEnd: function (column, columns) {
            },
            getMinWidthOf: function ($thNode) {
            },
            stateSaveCallback: function (settings, data) {
            },
            stateLoadCallback: function (settings) {
            }
        };

        let dtURL = "@Url.Action("GetDataDeleted", "Product")";
        let deleteDataUrl = `/product/restore/:id`;
        
        const dt = await dataTableRender(dtURL, columns, options, "POST", deleteDataUrl, 3, 'product')
    });
</script>
}