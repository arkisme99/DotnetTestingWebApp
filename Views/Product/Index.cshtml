@using Microsoft.AspNetCore.Html
@model IEnumerable<DotnetTestingWebApp.Models.Product>

@{
    ViewData["Title"] = "Produk Page";
}

@await Component.InvokeAsync(
    "PageHeader", 
    new { 
        PageTitle = "Produk Manajemen", 
        breadcrumb = new HtmlString("<li class='breadcrumb-item'><a asp-area='' asp-controller='Home' asp-action='Index'>Home</a></li><li class='breadcrumb-item active'>Produk</li>")
    }
)
<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <card-layout title="Daftar Produk" button-create-link="Product/Create" button-multiple-delete="true">
                    @await Html.PartialAsync("Components/_TableOuter", new HtmlString(@"
                        <thead>
                            <tr>
                                <th width='5%'><input type='checkbox' id='checkAll'></th>
                                <th width='15%'>Nama</th>
                                <th width='5%'>Harga</th>
                                <th width='10%'>Created At</th>
                                <th width='10%'>Updated At</th>
                                <th width='10%'>Actions</th>
                            </tr>
                        </thead>
                        <tbody></tbody>"), new ViewDataDictionary(ViewData) { { "TableId", "product" } })
                </card-layout>
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("Components/_ModalDelete", new HtmlString(@"<p>Anda yakin ingin hapus data ?</p>
		<p id='content'></p>"), new ViewDataDictionary(ViewData) { { "ModalId", "modal-delete" }, { "FormId", "formHapus" } })

@await Html.PartialAsync("Components/_ModalDelete", new HtmlString(@"<p>Anda yakin ingin hapus data yang terpilih ?</p>
		<input type='hidden' name='datahapus' id='datahapus' value=''>"), new ViewDataDictionary(ViewData) { { "ModalId", "modal-multidelete" }, { "FormId", "formHapusMulti" } })

@section Styles {
<link rel="stylesheet" href="~/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
<link rel="stylesheet" href="~/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
<link rel="stylesheet" href="~/plugins/datatables-buttons/css/buttons.bootstrap4.min.css">
<link rel="stylesheet" href="~/dist/jquery.dataTables.colResize.css">
}

@section Scripts {
<script src="~/plugins/datatables/jquery.dataTables.min.js"></script>
<script src="~/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
<script src="~/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
<script src="~/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
<script src="~/dist/jquery.dataTables.colResize.js"></script>
<script src="~/helpers/js/datatable-render.js"></script>
<script src="~/helpers/js/format-date.js"></script>
<script src="~/helpers/js/format-rupiah.js"></script>
<script type="text/template" id="tpl-button-dropdown">
    @await Html.PartialAsync("Components/_ButtonDropdown", new HtmlString(@"<div class='dropdown-menu' style=''>__BTN__</div>"))
</script>
<script type="text/template" id="tpl-button-edit">
    @await Html.PartialAsync("Components/_ButtonEdit", new ViewDataDictionary(ViewData) { { "LinkPath", "__LINK__" } })
</script>
<script type="text/template" id="tpl-button-delete">
    @await Html.PartialAsync("Components/_ButtonDelete", new ViewDataDictionary(ViewData) { { "DataId", "__DATAID__" }, {"DataTitle", "__DATATITLE__"} })
</script>
<script type="text/template" id="tpl-loading-icon">
    @await Html.PartialAsync("Components/_LoadingIcon", new ViewDataDictionary(ViewData) { { "DataId", "__DATAID__" }, {"DataTitle", "__DATATITLE__"} })
</script>
<script>
    $(function () {
        let columns = [{
                data: 'id',
                orderable: false,
            searchable: false,
            render: function(data, type, row, meta) {
                let check = `<input name='idpilih[]' type="checkbox" id="checkItem" value="${row.id}">`;
                return check;
            }
        },
        {
            data: 'name',
            render: function(data, type, row, meta) {
                return `${row.name}`;
            }
        },
        {
            data: 'price',
            render: function(data, type, row, meta) {
                return `${formatRupiah(row.price)}`;
            }
        },
        {
            data: 'createdAt',
            render: function(data, type, row, meta) {
                return `${formatDateTimeYMDHIS(row.createdAt)}`;
            }
        },
        {
            data: 'updatedAt',
            render: function(data, type, row, meta) {
                return `${formatDateTimeYMDHIS(row.updatedAt)}`;
            }
        },
        {
            data: 'id',
            orderable: false,
            searchable: false,
            render: function(data, type, row, meta) {
                let id = row.id;
                let title = row.name;

                let tpl = $("#tpl-button-edit").html();
                tpl = tpl.replace("__LINK__", `/Product/Edit/${id}`);
                
                let tplDelete = $("#tpl-button-delete").html();
                tplDelete = tplDelete.replace("__DATAID__", id);
                tplDelete = tplDelete.replace("__DATATITLE__", title);

                let tplDropdown = $("#tpl-button-dropdown").html()
                tplDropdown = tplDropdown.replace("__BTN__", tpl + tplDelete)
                
                let html = '';
                html += tplDropdown;
                return html;
            }
        }
    ];
        
        let options = {
            isEnabled: true,
            saveState: false,
            hoverClass: 'dt-colresizable-hover',
            hasBoundCheck: true,
            minBoundClass: 'dt-colresizable-bound-min',
            maxBoundClass: 'dt-colresizable-bound-max',
            isResizable: function (column) {
                return true;
            },
            onResizeStart: function (column, columns) {
            },
            onResize: function (column) {
            },
            onResizeEnd: function (column, columns) {
            },
            getMinWidthOf: function ($thNode) {
            },
            stateSaveCallback: function (settings, data) {
            },
            stateLoadCallback: function (settings) {
            }
        };

        let dtURL = "@Url.Action("GetData", "Product")";
        let deleteDataUrl = `Product/Delete/:id`;
        
        dataTableRender(dtURL, columns, options, "POST", deleteDataUrl)
    });

    function hapusmulti() {
        var id = [];

        $(':checkbox:checked').each(function(i) {
            id[i] = $(this).val();
        });

        if (id.length === 0)
        {} else {

            $('#datahapus').val(id)
            let deleteUrl = "";

            $('#formHapusMulti').attr('action', deleteUrl);
            $('#modal-multidelete').modal('show');
        }
    }
</script>
}